# scanner.py
"""
App Streamlit para escanear QR desde m√≥viles
Se conecta al servidor HTTP de la app principal en Render.com
"""

import streamlit as st
import requests
import json
import time
import os
import socket

# Configuraci√≥n para m√≥viles
st.set_page_config(
    page_title="üì± QR Scanner",
    page_icon="üì±",
    layout="wide",
    initial_sidebar_state="collapsed"  # Sidebar cerrado en m√≥viles
)

# CSS personalizado para m√≥viles
st.markdown("""
<style>
    /* Optimizaci√≥n para m√≥viles */
    .main {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    .stButton button {
        width: 100%;
        height: 3rem;
        font-size: 1.2rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }
    
    .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }

    .info-message {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
    }
    
    h1 {
        text-align: center;
        color: #333;
    }
    
    h2 {
        text-align: center;
        color: #555;
    }
    
    .st-emotion-cache-1j71w2w {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding: 10px;
        text-align: center;
        font-size: 0.8rem;
        color: #777;
    }
    .st-emotion-cache-12fmwvp {
        flex-direction: column-reverse; /* Pone los botones de arriba a abajo en m√≥vil */
        width: 100%;
    }
</style>
""", unsafe_allow_html=True)

# === VARIABLES DE SESI√ìN Y ESTADO ===
if 'scan_result' not in st.session_state:
    st.session_state.scan_result = {"status": "info", "message": "Esperando escaneo..."}
if 'connection_status' not in st.session_state:
    st.session_state.connection_status = "disconnected"
if 'stats' not in st.session_state:
    st.session_state.stats = {}

# === FUNCIONES DE CONEXI√ìN ===
@st.cache_data(ttl=60)
def get_backend_url():
    """Obtener la URL del backend desde una variable de entorno o por defecto."""
    return os.getenv('RENDER_BACKEND_URL', 'https://qr-scanner-mobile.onrender.com')

def check_connection(url: str):
    """Verificar la conexi√≥n con el servidor."""
    try:
        response = requests.get(f"{url}/health", timeout=5)
        response.raise_for_status()
        st.session_state.connection_status = "connected"
        st.session_state.stats = response.json()
        return True
    except requests.exceptions.RequestException as e:
        st.session_state.connection_status = "disconnected"
        return False

def get_local_ip():
    """Obtener la IP local del dispositivo."""
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        # noinspection PyUnresolvedReferences
        s.connect(('10.255.255.255', 1))
        IP = s.getsockname()[0]
    except Exception:
        IP = '127.0.0.1'
    finally:
        s.close()
    return IP

# === L√ìGICA DE ESCANEO ===
def send_scan_to_backend(attendee_id: str, scan_type: str, user: str, location: str):
    """Enviar el ID del QR al backend para su validaci√≥n."""
    backend_url = st.session_state.get('backend_url', get_backend_url())
    try:
        response = requests.post(
            f"{backend_url}/validate_attendee",
            json={
                "attendee_id": attendee_id,
                "scan_type": scan_type,
                "user_id": user,
                "location": location
            },
            timeout=10
        )
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        st.session_state.scan_result = {
            "status": "error",
            "message": f"Error de conexi√≥n: {str(e)}"
        }
        return None

def process_scan(attendee_id: str, scan_type: str, user: str, location: str):
    """Procesar un escaneo y mostrar el resultado."""
    with st.spinner("Validando QR..."):
        result = send_scan_to_backend(attendee_id, scan_type, user, location)
        
        if result:
            st.session_state.scan_result = result
            # Actualizar estad√≠sticas en segundo plano
            check_connection(st.session_state.get('backend_url', get_backend_url()))
            
# === INTERFAZ DE USUARIO ===
st.title("üì± QR Scanner M√≥vil")
st.markdown("---")

# Formulario para configuraci√≥n
with st.sidebar:
    st.header("üîß Configuraci√≥n")
    
    st.subheader("Conexi√≥n del Servidor")
    backend_url = st.text_input(
        "URL del Servidor",
        value=get_backend_url(),
        placeholder="Ej: https://backend.onrender.com"
    )
    st.session_state.backend_url = backend_url
    
    st.markdown(f"**IP Local sugerida:** `{get_local_ip()}`")
    st.markdown("---")
    
    st.subheader("Modo de Escaneo")
    scan_mode_options = list(st.session_state.stats.get('SCAN_TYPES', {}).keys())
    scan_type = st.selectbox(
        "Tipo de Escaneo",
        options=scan_mode_options if scan_mode_options else ['ENTRY', 'SESSION', 'STAND'],
        format_func=lambda x: st.session_state.stats.get('SCAN_TYPES', {}).get(x, x)
    )
    
    scan_user = st.text_input("Usuario (Ej. Staff)", value="Staff")
    scan_location = st.text_input("Ubicaci√≥n", value="Entrada Principal")

# Secciones principales
st.subheader("Estad√≠sticas del Servidor")
col1, col2 = st.columns(2)
with col1:
    st.metric(
        "Asistentes",
        st.session_state.stats.get('attendees_count', 'N/A')
    )
with col2:
    st.metric(
        "Escaneos",
        st.session_state.stats.get('scans_count', 'N/A')
    )

st.markdown("---")

st.subheader("Escanear C√≥digo QR")

# Entrada para el ID del QR
qr_input = st.text_input("Ingresar ID del Asistente", placeholder="Ej: 0001")

if st.button("üîç Validar QR"):
    if qr_input:
        process_scan(qr_input, scan_type, scan_user, scan_location)
    else:
        st.session_state.scan_result = {"status": "error", "message": "Por favor, ingresa un ID."}

# Mostrar el resultado del escaneo
result = st.session_state.scan_result
if result["status"] == "success":
    st.success(f"‚úÖ {result['message']}")
    st.json(result['attendee'])
elif result["status"] == "error":
    st.error(f"‚ùå {result['message']}")
else:
    st.info(f"‚ÑπÔ∏è {result['message']}")

st.markdown("---")

# Bot√≥n para refrescar
if st.button("üîÑ Actualizar Conexi√≥n"):
    check_connection(st.session_state.get('backend_url', get_backend_url()))
    if st.session_state.connection_status == "connected":
        st.success("‚úÖ Conectado al servidor principal.")
    else:
        st.error("‚ùå No se pudo conectar al servidor principal.")

# Footer
st.markdown("<p style='text-align: center; color: #aaa;'>Powered by Streamlit</p>", unsafe_allow_html=True)

# Auto-refresh
if st.session_state.connection_status != "connected":
    st.warning("No conectado al servidor. Por favor, verifica la URL.")
else:
    # Este bloque de c√≥digo invisible actualiza la p√°gina cada 30 segundos
    # para refrescar las estad√≠sticas.
    st.markdown(f'<meta http-equiv="refresh" content="30">', unsafe_allow_html=True)
