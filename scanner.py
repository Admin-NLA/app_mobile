# scanner_mobile.py
"""
App Streamlit para escanear QR desde m√≥viles
Se conecta al servidor HTTP de la app tkinter principal
"""

import streamlit as st
import requests
import qrcode
from PIL import Image
import json
import time
import cv2  # Importamos la librer√≠a OpenCV
import numpy as np
import socket

# Configuraci√≥n para m√≥viles
st.set_page_config(
    page_title="üì± QR Scanner",
    page_icon="üì±",
    layout="wide",
    initial_sidebar_state="collapsed"  # Sidebar cerrado en m√≥viles
)

# CSS personalizado para m√≥viles
st.markdown("""
<style>
    /* Optimizaci√≥n para m√≥viles */
    .main {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    .stButton button {
        width: 100%;
        height: 3rem;
        font-size: 1.2rem;
        border-radius: 0.5rem;
    }
    
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    
    .success-message {
        background-color: #d4edda;
        color: #155724;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border: 2px solid #c3e6cb;
        margin: 1rem 0;
        font-size: 1.1rem;
    }
    
    .error-message {
        background-color: #f8d7da;
        color: #721c24;
        padding: 1.5rem;
        border-radius: 0.5rem;
        border: 2px solid #f5c6cb;
        margin: 1rem 0;
        font-size: 1.1rem;
    }
    
    .info-message {
        background-color: #d1ecf1;
        color: #0c5460;
        padding: 1rem;
        border-radius: 0.5rem;
        border: 1px solid #bee5eb;
        margin: 1rem 0;
    }
    
    /* Hacer botones m√°s t√°ctiles */
    .stButton button:active {
        transform: scale(0.95);
    }
    
    /* Mejorar legibilidad en m√≥viles */
    .stMarkdown h1, .stMarkdown h2, .stMarkdown h3 {
        line-height: 1.2;
    }
    
    /* Espaciado mejor para pantallas peque√±as */
    .stColumns > div {
        padding: 0.5rem;
    }
</style>
""", unsafe_allow_html=True)

# ===========================
# FUNCIONES AUXILIARES
# ===========================

@st.cache_data(ttl=10)  # Cache por 10 segundos
def test_connection(host, port=5000):
    """Probar conexi√≥n con el servidor tkinter"""
    try:
        # Detectar si es una URL de ngrok o local
        if 'ngrok.io' in host or 'ngrok.app' in host:
            # Para ngrok, usar https y puerto est√°ndar
            if not host.startswith('http'):
                url = f"https://{host}/health"
            else:
                url = f"{host}/health"
        else:
            # Para IPs locales, usar http y puerto espec√≠fico
            url = f"http://{host}:{port}/health"
        
        response = requests.get(url, timeout=5)
        return response.status_code == 200, response.json() if response.status_code == 200 else None
    except Exception as e:
        return False, None

def send_qr_to_server(host, port, qr_data, device_info):
    """Enviar QR al servidor para validaci√≥n"""
    try:
        # Detectar si es una URL de ngrok o local
        if 'ngrok.io' in host or 'ngrok.app' in host:
            # Para ngrok, usar https y puerto est√°ndar
            if not host.startswith('http'):
                url = f"https://{host}/validate_attendee"
            else:
                url = f"{host}/validate_attendee"
        else:
            # Para IPs locales, usar http y puerto espec√≠fico
            url = f"http://{host}:{port}/validate_attendee"
        
        response = requests.post(
            url,
            json={
                'qr_data': qr_data,
                'device_info': device_info
            },
            timeout=10
        )
        
        return True, response.json()
    
    except requests.exceptions.Timeout:
        return False, {'error': '‚è∞ Timeout - El servidor no responde'}
    except requests.exceptions.ConnectionError:
        return False, {'error': 'üîå Error de conexi√≥n - Verifica que el servidor est√© activo'}
    except Exception as e:
        return False, {'error': f'üî• Error: {str(e)}'}

@st.cache_data(ttl=30)  # Cache por 30 segundos
def get_server_stats(host, port=5000):
    """Obtener estad√≠sticas del servidor"""
    try:
        # Detectar si es una URL de ngrok o local
        if 'ngrok.io' in host or 'ngrok.app' in host:
            if not host.startswith('http'):
                url = f"https://{host}/get_stats"
            else:
                url = f"{host}/get_stats"
        else:
            url = f"http://{host}:{port}/get_stats"
            
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            return response.json()
    except:
        pass
    return None

def decode_qr_from_image(image):
    """Detectar y decodificar QR de una imagen usando OpenCV"""
    try:
        # Convertir la imagen de PIL a un array de NumPy (formato BGR para OpenCV)
        img_array = np.array(image.convert('RGB'))
        img_bgr = cv2.cvtColor(img_array, cv2.COLOR_RGB2BGR)
        
        # Inicializar el detector de QR de OpenCV
        qr_detector = cv2.QRCodeDetector()
        
        # Detectar y decodificar el c√≥digo QR
        qr_data, points, _ = qr_detector.detectAndDecode(img_bgr)
        
        results = []
        if qr_data:
            results.append({
                'data': qr_data,
                'type': 'QRCODE', # OpenCV no da el tipo, lo ponemos fijo
                'rect': None # OpenCV no da un objeto rect, lo dejamos como None
            })
            
        return results
    
    except Exception as e:
        st.error(f"Error detectando QR con OpenCV: {str(e)}")
        return []

def get_device_info():
    """Obtener informaci√≥n del dispositivo m√≥vil"""
    return {
        'device_name': 'M√≥vil Streamlit',
        'location': 'Scanner M√≥vil',
        'user_agent': 'Streamlit Mobile Scanner',
        'timestamp': time.time()
    }

def auto_detect_server():
    """Auto-detectar servidor en la red local (solo WiFi local)"""
    try:
        # Obtener IP local del m√≥vil
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        local_ip = s.getsockname()[0]
        s.close()
        
        # Verificar si estamos en una red local
        if not (local_ip.startswith('192.168.') or 
                local_ip.startswith('10.') or 
                local_ip.startswith('172.')):
            return None, "No est√°s en una red WiFi local"
        
        # Obtener rango de red
        base_ip = ".".join(local_ip.split(".")[:-1]) + "."
        
        # IPs comunes a probar (limitado para ser m√°s r√°pido)
        common_ips = [f"{base_ip}{i}" for i in [1, 100, 101, 102, 103, 104, 105]]
        
        for test_ip in common_ips:
            is_connected, health_data = test_connection(test_ip, 5000)
            if is_connected:
                return test_ip, health_data
                
        return None, "No se encontr√≥ servidor en la red local"
        
    except Exception as e:
        return None, f"Error en auto-detecci√≥n: {str(e)}"

# ===========================
# ESTADO DE LA APLICACI√ìN
# ===========================

# Inicializar session state
if 'connected' not in st.session_state:
    st.session_state.connected = False
if 'server_host' not in st.session_state:
    st.session_state.server_host = ""
if 'scan_history' not in st.session_state:
    st.session_state.scan_history = []
if 'last_connection_check' not in st.session_state:
    st.session_state.last_connection_check = 0

# ===========================
# INTERFAZ PRINCIPAL
# ===========================

# T√≠tulo principal con emoji llamativo
st.title("üì± QR Scanner M√≥vil")
st.markdown("### üîó Conectar al Sistema Principal")

# ===========================
# CONFIGURACI√ìN DE CONEXI√ìN
# ===========================

with st.expander("‚öôÔ∏è Configuraci√≥n del Servidor", expanded=not st.session_state.connected):
    
    col1, col2 = st.columns([3, 1])
    
    with col1:
        server_host = st.text_input(
            "üåê Servidor Principal",
            value=st.session_state.server_host or "192.168.1.100",
            placeholder="192.168.1.100 o abc123.ngrok.io",
            help="IP local (misma WiFi) o URL p√∫blica de ngrok (acceso remoto)"
        )
    
    with col2:
        server_port = st.number_input(
            "Puerto",
            value=5000,
            min_value=1000,
            max_value=9999
        )

    # Botones de conexi√≥n
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîç Probar Conexi√≥n", use_container_width=True):
            with st.spinner("üîÑ Conectando..."):
                is_connected, health_data = test_connection(server_host, server_port)
                
                if is_connected:
                    st.session_state.connected = True
                    st.session_state.server_host = server_host
                    st.success("‚úÖ ¬°Conexi√≥n exitosa!")
                    
                    if health_data:
                        st.info(f"""
                        **Estado del Servidor:**
                        - üë• Asistentes: {health_data.get('attendees_loaded', 0)}
                        - üìä Escaneos: {health_data.get('scans_count', 0)}
                        - ‚è∞ √öltima actualizaci√≥n: {health_data.get('timestamp', 'N/A')[:19]}
                        """)
                else:
                    st.session_state.connected = False
                    st.error("‚ùå No se puede conectar")
    
    with col2:
        if st.button("üîÑ Auto-detectar", use_container_width=True):
            with st.spinner("üîç Buscando servidor local..."):
                found_ip, result = auto_detect_server()
                
                if found_ip:
                    st.session_state.server_host = found_ip
                    st.session_state.connected = True
                    st.success(f"‚úÖ ¬°Servidor encontrado en {found_ip}!")
                else:
                    st.warning(f"‚ö†Ô∏è {result}")
                    st.info("üí° **Sugerencias:**\n- Para WiFi local: verifica que la PC est√© en la misma red\n- Para acceso remoto: usa la URL de ngrok manualmente")
    
    with col3:
        if st.button("‚ùå Desconectar", use_container_width=True):
            st.session_state.connected = False
            st.session_state.server_host = ""
            st.info("üîå Desconectado del servidor")

# ===========================
# VERIFICACI√ìN DE CONEXI√ìN AUTOM√ÅTICA
# ===========================

# Verificar conexi√≥n cada 15 segundos si hay un host configurado
current_time = time.time()
if current_time - st.session_state.last_connection_check > 15:
    if st.session_state.server_host:
        is_connected, _ = test_connection(st.session_state.server_host, server_port)
        st.session_state.connected = is_connected
        st.session_state.last_connection_check = current_time

# ===========================
# ESTADO DE CONEXI√ìN Y DASHBOARD
# ===========================

if st.session_state.connected:
    st.success(f"üîó Conectado a {st.session_state.server_host}:{server_port}")
    
    # Mostrar estad√≠sticas del servidor
    stats = get_server_stats(st.session_state.server_host, server_port)
    if stats:
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("üë• Asistentes", stats.get('total_attendees', 0))
        with col2:
            st.metric("üö™ Entradas", stats.get('entry_scans', 0))
        with col3:
            st.metric("üéØ Sesiones", stats.get('session_scans', 0))
        with col4:
            st.metric("üõçÔ∏è Stands", stats.get('stand_scans', 0))
    
    st.markdown("---")
    
    # ===========================
    # SECCI√ìN DE ESCANEO PRINCIPAL
    # ===========================
    
    st.subheader("üì∏ Escanear C√≥digo QR")
    
    # Instrucciones claras
    st.info("üëÜ **Instrucciones:** Usa la c√°mara para capturar el c√≥digo QR del asistente. El sistema validar√° autom√°ticamente la informaci√≥n.")
    
    # Pesta√±as para diferentes m√©todos de escaneo
    tab1, tab2, tab3 = st.tabs(["üì∑ C√°mara en Vivo", "üìÅ Subir Imagen", "üìä Historial"])
    
    with tab1:
        st.markdown("**üî¥ Captura en tiempo real**")
        
        # Captura con c√°mara - optimizada para m√≥viles
        camera_input = st.camera_input("Enfocar al c√≥digo QR y tomar foto", key="camera_live")
        
        if camera_input is not None:
            # Mostrar imagen capturada con tama√±o optimizado para m√≥vil
            image = Image.open(camera_input)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(image, caption="üì∏ Imagen capturada", use_column_width=True)
            
            with st.spinner("üîç Analizando c√≥digo QR..."):
                # Detectar QRs en la imagen
                qr_results = decode_qr_from_image(image)
                
                if qr_results:
                    st.success(f"üéØ ¬°{len(qr_results)} c√≥digo(s) QR detectado(s)!")
                    
                    for i, qr_result in enumerate(qr_results):
                        qr_data = qr_result['data']
                        
                        with st.expander(f"üì± QR #{i+1} - Ver contenido", expanded=True):
                            st.code(qr_data[:200] + ("..." if len(qr_data) > 200 else ""))
                        
                        # Bot√≥n grande para validar
                        if st.button(
                            f"‚úÖ VALIDAR ASISTENTE #{i+1}", 
                            key=f"validate_live_{i}",
                            use_container_width=True,
                            type="primary"
                        ):
                            with st.spinner("‚è≥ Validando con el servidor..."):
                                success, result = send_qr_to_server(
                                    st.session_state.server_host,
                                    server_port,
                                    qr_data,
                                    get_device_info()
                                )
                                
                                # Guardar en historial
                                scan_record = {
                                    'timestamp': time.time(),
                                    'qr_data': qr_data[:50] + "...",
                                    'success': success,
                                    'result': result
                                }
                                st.session_state.scan_history.insert(0, scan_record)
                                
                                # Mantener solo √∫ltimos 10 registros
                                if len(st.session_state.scan_history) > 10:
                                    st.session_state.scan_history = st.session_state.scan_history[:10]
                                
                                if success and result.get('success'):
                                    # ‚úÖ VALIDACI√ìN EXITOSA
                                    attendee = result.get('attendee', {})
                                    scan_info = result.get('scan_info', {})
                                    
                                    st.markdown(f"""
                                    <div class="success-message">
                                        <h3>‚úÖ ACCESO AUTORIZADO</h3>
                                        <h4>üë§ {attendee.get('nombre', 'N/A')} {attendee.get('apellido', 'N/A')}</h4>
                                        
                                        <p><strong>üè¢ Empresa:</strong> {attendee.get('empresa', 'N/A')}</p>
                                        <p><strong>üé´ Tipo de pase:</strong> {attendee.get('tipo', 'N/A')}</p>
                                        <p><strong>üÜî ID:</strong> {attendee.get('id', 'N/A')}</p>
                                        
                                        <hr>
                                        <p><strong>üìä Registro:</strong> {scan_info.get('scan_type', 'N/A').title()}</p>
                                        <p><strong>üìÖ D√≠a:</strong> {scan_info.get('day', 'N/A')}</p>
                                        <p><strong>üìç Ubicaci√≥n:</strong> {scan_info.get('location', 'M√≥vil')}</p>
                                        
                                        <p style="color: #155724; font-weight: bold; font-size: 1.2em; margin-top: 15px;">
                                        {result.get('message', 'Registro exitoso')}
                                        </p>
                                    </div>
                                    """, unsafe_allow_html=True)
                                    
                                    # Efectos de √©xito
                                    st.balloons()
                                    time.sleep(1)  # Pausa para que se vea la celebraci√≥n
                                    
                                else:
                                    # ‚ùå VALIDACI√ìN FALLIDA
                                    error_msg = result.get('message', 'Error desconocido') if success else result.get('error', 'Error de conexi√≥n')
                                    
                                    st.markdown(f"""
                                    <div class="error-message">
                                        <h3>‚ùå ACCESO DENEGADO</h3>
                                        <p style="font-size: 1.1em; font-weight: bold;">{error_msg}</p>
                                        
                                        <hr>
                                        <p><strong>üîç Posibles causas:</strong></p>
                                        <ul>
                                            <li>Asistente no registrado en el sistema</li>
                                            <li>C√≥digo QR da√±ado o ilegible</li>
                                            <li>Tipo de acceso no autorizado</li>
                                            <li>Problema de conexi√≥n con el servidor</li>
                                        </ul>
                                    </div>
                                    """, unsafe_allow_html=True)
                else:
                    st.warning("‚ö†Ô∏è **No se detect√≥ c√≥digo QR** en la imagen")
                    st.markdown("""
                    **üí° Consejos para mejor detecci√≥n:**
                    - Aseg√∫rate de que el QR est√© bien iluminado
                    - Mant√©n el c√≥digo QR centrado en la imagen
                    - Evita reflejos o sombras sobre el c√≥digo
                    - Verifica que el c√≥digo no est√© borroso
                    """)
    
    with tab2:
        st.markdown("**üìé Subir desde galer√≠a**")
        
        uploaded_file = st.file_uploader(
            "Seleccionar imagen con c√≥digo QR",
            type=['jpg', 'jpeg', 'png'],
            help="Sube una foto que contenga el c√≥digo QR a validar"
        )
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(image, caption="üìÅ Imagen subida", use_column_width=True)
            
            # Procesamiento similar al de c√°mara
            with st.spinner("üîç Procesando imagen..."):
                qr_results = decode_qr_from_image(image)
                
                if qr_results:
                    for i, qr_result in enumerate(qr_results):
                        qr_data = qr_result['data']
                        
                        if st.button(f"‚úÖ Validar QR #{i+1} (Archivo)", key=f"validate_upload_{i}", use_container_width=True):
                            # L√≥gica similar a la c√°mara en vivo...
                            with st.spinner("‚è≥ Validando..."):
                                success, result = send_qr_to_server(
                                    st.session_state.server_host,
                                    server_port,
                                    qr_data,
                                    get_device_info()
                                )
                                
                                # Agregar al historial y mostrar resultado...
                                
                                if success and result.get('success'):
                                    st.success("‚úÖ ¬°Validaci√≥n exitosa!")
                                    attendee = result.get('attendee', {})
                                    st.json({
                                        'Nombre': f"{attendee.get('nombre')} {attendee.get('apellido')}",
                                        'Empresa': attendee.get('empresa'),
                                        'Tipo': attendee.get('tipo'),
                                        'Mensaje': result.get('message')
                                    })
                                    st.balloons()
                                else:
                                    st.error(f"‚ùå {result.get('message') if success else result.get('error')}")
    
    with tab3:
        st.markdown("**üìä Historial de escaneos**")
        
        if st.session_state.scan_history:
            for i, record in enumerate(st.session_state.scan_history):
                timestamp = time.strftime('%H:%M:%S', time.localtime(record['timestamp']))
                status = "‚úÖ" if record['success'] and record['result'].get('success') else "‚ùå"
                
                with st.expander(f"{status} {timestamp} - Escaneo #{len(st.session_state.scan_history)-i}"):
                    st.text(f"Hora: {timestamp}")
                    st.text(f"QR: {record['qr_data']}")
                    
                    if record['success'] and record['result'].get('success'):
                        attendee = record['result'].get('attendee', {})
                        st.success(f"V√°lido: {attendee.get('nombre')} {attendee.get('apellido')}")
                    else:
                        error = record['result'].get('message') if record['success'] else record['result'].get('error')
                        st.error(f"Error: {error}")
            
            if st.button("üóëÔ∏è Limpiar Historial", use_container_width=True):
                st.session_state.scan_history = []
                st.success("Historial limpiado")
                
        else:
            st.info("üìù No hay escaneos en el historial a√∫n")
    
    # ===========================
    # INFORMACI√ìN ADICIONAL
    # ===========================
    
    st.markdown("---")
    st.markdown("### ‚ÑπÔ∏è Informaci√≥n del Sistema")
    
    with st.expander("üìã Estado del Sistema"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("üîó Estado Conexi√≥n", "Conectado" if st.session_state.connected else "Desconectado")
            st.metric("üì± Escaneos Realizados", len(st.session_state.scan_history))
        
        with col2:
            st.metric("üåê Servidor", f"{st.session_state.server_host}:{server_port}")
            exitosos = len([r for r in st.session_state.scan_history if r['success'] and r['result'].get('success')])
            st.metric("‚úÖ Escaneos Exitosos", exitosos)

else:
    # ===========================
    # ESTADO DESCONECTADO
    # ===========================
    
    st.error(f"‚ùå No conectado al servidor principal")
    
    st.markdown("""
    ### üîß Para conectarte:
    
    #### üè† MISMA RED WiFi:
    1. **üñ•Ô∏è Ejecuta:** `python main.py`
    2. **üåê Usa IP local** como `192.168.1.100:5000`
    3. **üîç Presiona "Auto-detectar"**
    
    #### üåç ACCESO REMOTO (desde cualquier lugar):
    1. **üñ•Ô∏è Ejecuta:** `USE_NGROK=true python main.py`  
    2. **üìã Copia la URL** que aparece (ej: `abc123.ngrok.io`)
    3. **üåê √ösala SIN puerto** en el campo servidor
    4. **üì± Puerto:** `80` (autom√°tico)
    
    ### üí° URLs de ejemplo:
    - **Local:** `192.168.1.100` + puerto `5000`
    - **Remoto:** `abc123.ngrok.io` + puerto `80`
    
    ### ‚ö†Ô∏è Si no puedes conectarte:
    - **Local:** Verifica que ambos est√©n en la misma WiFi
    - **Remoto:** Instala ngrok con `pip install pyngrok`
    - **Ambos:** Aseg√∫rate de que la app tkinter est√© ejecut√°ndose
    """)

# ===========================
# AUTO-REFRESH Y FOOTER
# ===========================

# Bot√≥n manual de refresh
if st.session_state.connected:
    if st.button("üîÑ Actualizar Datos", use_container_width=True):
        st.rerun()

# Footer
st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; margin-top: 2rem;'>
    üì± <strong>QR Scanner M√≥vil v1.0</strong><br>
    Desarrollado para Sistema de Gesti√≥n de Asistentes<br>
    <small>Optimizado para dispositivos m√≥viles</small>
</div>
""", unsafe_allow_html=True)